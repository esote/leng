// Package sn provides sorting networks for various input sizes.
//
// SN02-09 are optimal for both swaps and depth. SN10 is optimal for swaps (a
// depth-optimal version is known, but less useful). SN11 and onward are sorting
// networks with the lowest-known swap count, but have not been proven optimal
// in that respect.
//
// Many of the sorting networks allow parallel swaps, especially at increasing
// depth. However, this cannot be enforced explicitly (using goroutines here
// would be very slow). Optimization to encourage vectorization and good
// instruction ordering is left to the assembler, which if mature enough could
// use SIMD instructions.
//
// Sorting networks are from the collection
// http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html.
package sn

func swp(a []int, i, j int) {
	if a[i] > a[j] {
		a[i], a[j] = a[j], a[i]
	}
}

const (
	// MinSN is the input size of the smallest available sorting network.
	MinSN = 2

	// MaxSN is the input size of the largest available sorting network.
	MaxSN = 20
)

var jump = [...]func([]int){
	2:  SN02,
	3:  SN03,
	4:  SN04,
	5:  SN05,
	6:  SN06,
	7:  SN07,
	8:  SN08,
	9:  SN09,
	10: SN10,
	11: SN11,
	12: SN12,
	13: SN13,
	14: SN14,
	15: SN15,
	16: SN16,
	17: SN17,
	18: SN18,
	19: SN19,
	20: SN20,
}

// Jump returns the sorting network function for the input size n, or nil if
// none exists.
func Jump(n int) func(a []int) {
	if n < MinSN || n > MaxSN {
		return nil
	}
	return jump[n]
}

// SN02 is the optimal sorting network on 2 inputs.
//	[(0,1)]
func SN02(a []int) {
	_ = a[1]
	swp(a, 0, 1)
}

// SN03 is the optimal sorting network on 3 inputs.
//	[(0,2)]
//	[(0,1)]
//	[(1,2)]
func SN03(a []int) {
	_ = a[2]
	swp(a, 0, 2)
	swp(a, 0, 1)
	swp(a, 1, 2)
}

// SN04 is the optimal sorting network on 4 inputs.
//	[(0,2),(1,3)]
//	[(0,1),(2,3)]
//	[(1,2)]
func SN04(a []int) {
	_ = a[3]
	{
		swp(a, 0, 2)
		swp(a, 1, 3)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
	}
	swp(a, 1, 2)
}

// SN05 is the optimal sorting network on 5 inputs.
//	[(0,3),(1,4)]
//	[(0,2),(1,3)]
//	[(0,1),(2,4)]
//	[(1,2),(3,4)]
//	[(2,3)]
func SN05(a []int) {
	_ = a[4]
	{
		swp(a, 0, 3)
		swp(a, 1, 4)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 3)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 4)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
	}
	swp(a, 2, 3)
}

// SN06 is the optimal sorting network on 6 inputs.
//	[(0,5),(1,3),(2,4)]
//	[(1,2),(3,4)]
//	[(0,3),(2,5)]
//	[(0,1),(2,3),(4,5)]
//	[(1,2),(3,4)]
func SN06(a []int) {
	_ = a[5]
	{
		swp(a, 0, 5)
		swp(a, 1, 3)
		swp(a, 2, 4)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
	}
	{
		swp(a, 0, 3)
		swp(a, 2, 5)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 5)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
	}
}

// SN07 is the optimal sorting network on 7 inputs.
//	[(0,6),(2,3),(4,5)]
//	[(0,2),(1,4),(3,6)]
//	[(0,1),(2,5),(3,4)]
//	[(1,2),(4,6)]
//	[(2,3),(4,5)]
//	[(1,2),(3,4),(5,6)]
func SN07(a []int) {
	_ = a[6]
	{
		swp(a, 0, 6)
		swp(a, 2, 3)
		swp(a, 4, 5)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 4)
		swp(a, 3, 6)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 5)
		swp(a, 3, 4)
	}
	{
		swp(a, 1, 2)
		swp(a, 4, 6)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 5, 6)
	}
}

// SN08 is the optimal sorting network on 8 inputs.
//	[(0,2),(1,3),(4,6),(5,7)]
//	[(0,4),(1,5),(2,6),(3,7)]
//	[(0,1),(2,3),(4,5),(6,7)]
//	[(2,4),(3,5)]
//	[(1,4),(3,6)]
//	[(1,2),(3,4),(5,6)]
func SN08(a []int) {
	_ = a[7]
	{
		swp(a, 0, 2)
		swp(a, 1, 3)
		swp(a, 4, 6)
		swp(a, 5, 7)
	}
	{
		swp(a, 0, 4)
		swp(a, 1, 5)
		swp(a, 2, 6)
		swp(a, 3, 7)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
	}
	{
		swp(a, 2, 4)
		swp(a, 3, 5)
	}
	{
		swp(a, 1, 4)
		swp(a, 3, 6)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 5, 6)
	}
}

// SN09 is the optimal sorting network on 9 inputs.
//	[(0,3),(1,7),(2,5),(4,8)]
//	[(0,7),(2,4),(3,8),(5,6)]
//	[(0,2),(1,3),(4,5),(7,8)]
//	[(1,4),(3,6),(5,7)]
//	[(0,1),(2,4),(3,5),(6,8)]
//	[(2,3),(4,5),(6,7)]
//	[(1,2),(3,4),(5,6)]
func SN09(a []int) {
	_ = a[8]
	{
		swp(a, 0, 3)
		swp(a, 1, 7)
		swp(a, 2, 5)
		swp(a, 4, 8)
	}
	{
		swp(a, 0, 7)
		swp(a, 2, 4)
		swp(a, 3, 8)
		swp(a, 5, 6)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 3)
		swp(a, 4, 5)
		swp(a, 7, 8)
	}
	{
		swp(a, 1, 4)
		swp(a, 3, 6)
		swp(a, 5, 7)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 4)
		swp(a, 3, 5)
		swp(a, 6, 8)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 5, 6)
	}
}

// SN10 is the size-sorting network on 10 inputs.
//	[(0,8),(1,9),(2,7),(3,5),(4,6)]
//	[(0,2),(1,4),(5,8),(7,9)]
//	[(0,3),(2,4),(5,7),(6,9)]
//	[(0,1),(3,6),(8,9)]
//	[(1,5),(2,3),(4,8),(6,7)]
//	[(1,2),(3,5),(4,6),(7,8)]
//	[(2,3),(4,5),(6,7)]
//	[(3,4),(5,6)]
func SN10(a []int) {
	_ = a[9]
	{
		swp(a, 0, 8)
		swp(a, 1, 9)
		swp(a, 2, 7)
		swp(a, 3, 5)
		swp(a, 4, 6)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 4)
		swp(a, 5, 8)
		swp(a, 7, 9)
	}
	{
		swp(a, 0, 3)
		swp(a, 2, 4)
		swp(a, 5, 7)
		swp(a, 6, 9)
	}
	{
		swp(a, 0, 1)
		swp(a, 3, 6)
		swp(a, 8, 9)
	}
	{
		swp(a, 1, 5)
		swp(a, 2, 3)
		swp(a, 4, 8)
		swp(a, 6, 7)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 5)
		swp(a, 4, 6)
		swp(a, 7, 8)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
	}
}

// SN11 is a sorting network on 11 inputs.
//	[(0,9),(1,6),(2,4),(3,7),(5,8)]
//	[(0,1),(3,5),(4,10),(6,9),(7,8)]
//	[(1,3),(2,5),(4,7),(8,10)]
//	[(0,4),(1,2),(3,7),(5,9),(6,8)]
//	[(0,1),(2,6),(4,5),(7,8),(9,10)]
//	[(2,4),(3,6),(5,7),(8,9)]
//	[(1,2),(3,4),(5,6),(7,8)]
//	[(2,3),(4,5),(6,7)]
func SN11(a []int) {
	_ = a[10]
	{
		swp(a, 0, 9)
		swp(a, 1, 6)
		swp(a, 2, 4)
		swp(a, 3, 7)
		swp(a, 5, 8)
	}
	{
		swp(a, 0, 1)
		swp(a, 3, 5)
		swp(a, 4, 10)
		swp(a, 6, 9)
		swp(a, 7, 8)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 5)
		swp(a, 4, 7)
		swp(a, 8, 10)
	}
	{
		swp(a, 0, 4)
		swp(a, 1, 2)
		swp(a, 3, 7)
		swp(a, 5, 9)
		swp(a, 6, 8)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 6)
		swp(a, 4, 5)
		swp(a, 7, 8)
		swp(a, 9, 10)
	}
	{
		swp(a, 2, 4)
		swp(a, 3, 6)
		swp(a, 5, 7)
		swp(a, 8, 9)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
	}
}

// SN12 is a sorting network on 12 inputs.
//	[(0,8),(1,7),(2,6),(3,11),(4,10),(5,9)]
//	[(0,1),(2,5),(3,4),(6,9),(7,8),(10,11)]
//	[(0,2),(1,6),(5,10),(9,11)]
//	[(0,3),(1,2),(4,6),(5,7),(8,11),(9,10)]
//	[(1,4),(3,5),(6,8),(7,10)]
//	[(1,3),(2,5),(6,9),(8,10)]
//	[(2,3),(4,5),(6,7),(8,9)]
//	[(4,6),(5,7)]
//	[(3,4),(5,6),(7,8)]
func SN12(a []int) {
	_ = a[11]
	{
		swp(a, 0, 8)
		swp(a, 1, 7)
		swp(a, 2, 6)
		swp(a, 3, 11)
		swp(a, 4, 10)
		swp(a, 5, 9)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 5)
		swp(a, 3, 4)
		swp(a, 6, 9)
		swp(a, 7, 8)
		swp(a, 10, 11)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 6)
		swp(a, 5, 10)
		swp(a, 9, 11)
	}
	{
		swp(a, 0, 3)
		swp(a, 1, 2)
		swp(a, 4, 6)
		swp(a, 5, 7)
		swp(a, 8, 11)
		swp(a, 9, 10)
	}
	{
		swp(a, 1, 4)
		swp(a, 3, 5)
		swp(a, 6, 8)
		swp(a, 7, 10)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 5)
		swp(a, 6, 9)
		swp(a, 8, 10)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
	}
	{
		swp(a, 4, 6)
		swp(a, 5, 7)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
	}
}

// SN13 is a sorting network on 13 inputs.
//	[(0,12),(1,10),(2,9),(3,7),(5,11),(6,8)]
//	[(1,6),(2,3),(4,11),(7,9),(8,10)]
//	[(0,4),(1,2),(3,6),(7,8),(9,10),(11,12)]
//	[(4,6),(5,9),(8,11),(10,12)]
//	[(0,5),(3,8),(4,7),(6,11),(9,10)]
//	[(0,1),(2,5),(6,9),(7,8),(10,11)]
//	[(1,3),(2,4),(5,6),(9,10)]
//	[(1,2),(3,4),(5,7),(6,8)]
//	[(2,3),(4,5),(6,7),(8,9)]
//	[(3,4),(5,6)]
func SN13(a []int) {
	_ = a[12]
	{
		swp(a, 0, 12)
		swp(a, 1, 10)
		swp(a, 2, 9)
		swp(a, 3, 7)
		swp(a, 5, 11)
		swp(a, 6, 8)
	}
	{
		swp(a, 1, 6)
		swp(a, 2, 3)
		swp(a, 4, 11)
		swp(a, 7, 9)
		swp(a, 8, 10)
	}
	{
		swp(a, 0, 4)
		swp(a, 1, 2)
		swp(a, 3, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 4, 6)
		swp(a, 5, 9)
		swp(a, 8, 11)
		swp(a, 10, 12)
	}
	{
		swp(a, 0, 5)
		swp(a, 3, 8)
		swp(a, 4, 7)
		swp(a, 6, 11)
		swp(a, 9, 10)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 5)
		swp(a, 6, 9)
		swp(a, 7, 8)
		swp(a, 10, 11)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 4)
		swp(a, 5, 6)
		swp(a, 9, 10)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 5, 7)
		swp(a, 6, 8)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
	}

}

// SN14 is a sorting network on 14 inputs.
//	[(0,6),(1,11),(2,12),(3,10),(4,5),(7,13),(8,9)]
//	[(1,2),(3,7),(4,8),(5,9),(6,10),(11,12)]
//	[(0,4),(1,3),(5,6),(7,8),(9,13),(10,12)]
//	[(0,1),(2,9),(3,7),(4,11),(6,10),(12,13)]
//	[(2,5),(4,7),(6,9),(8,11)]
//	[(1,2),(3,4),(6,7),(9,10),(11,12)]
//	[(1,3),(2,4),(5,6),(7,8),(9,11),(10,12)]
//	[(2,3),(4,7),(6,9),(10,11)]
//	[(4,5),(6,7),(8,9)]
//	[(3,4),(5,6),(7,8),(9,10)]
func SN14(a []int) {
	_ = a[13]
	{
		swp(a, 0, 6)
		swp(a, 1, 11)
		swp(a, 2, 12)
		swp(a, 3, 10)
		swp(a, 4, 5)
		swp(a, 7, 13)
		swp(a, 8, 9)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 7)
		swp(a, 4, 8)
		swp(a, 5, 9)
		swp(a, 6, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 0, 4)
		swp(a, 1, 3)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 13)
		swp(a, 10, 12)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 9)
		swp(a, 3, 7)
		swp(a, 4, 11)
		swp(a, 6, 10)
		swp(a, 12, 13)
	}
	{
		swp(a, 2, 5)
		swp(a, 4, 7)
		swp(a, 6, 9)
		swp(a, 8, 11)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 6, 7)
		swp(a, 9, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 11)
		swp(a, 10, 12)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 7)
		swp(a, 6, 9)
		swp(a, 10, 11)
	}
	{
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
	}
}

// SN15 is a sorting network on 15 inputs.
//	[(1,2),(3,10),(4,14),(5,8),(6,13),(7,12),(9,11)]
//	[(0,14),(1,5),(2,8),(3,7),(6,9),(10,12),(11,13)]
//	[(0,7),(1,6),(2,9),(4,10),(5,11),(8,13),(12,14)]
//	[(0,6),(2,4),(3,5),(7,11),(8,10),(9,12),(13,14)]
//	[(0,3),(1,2),(4,7),(5,9),(6,8),(10,11),(12,13)]
//	[(0,1),(2,3),(4,6),(7,9),(10,12),(11,13)]
//	[(1,2),(3,5),(8,10),(11,12)]
//	[(3,4),(5,6),(7,8),(9,10)]
//	[(2,3),(4,5),(6,7),(8,9),(10,11)]
//	[(5,6),(7,8)]
func SN15(a []int) {
	_ = a[14]
	{
		swp(a, 1, 2)
		swp(a, 3, 10)
		swp(a, 4, 14)
		swp(a, 5, 8)
		swp(a, 6, 13)
		swp(a, 7, 12)
		swp(a, 9, 11)
	}
	{
		swp(a, 0, 14)
		swp(a, 1, 5)
		swp(a, 2, 8)
		swp(a, 3, 7)
		swp(a, 6, 9)
		swp(a, 10, 12)
		swp(a, 11, 13)
	}
	{
		swp(a, 0, 7)
		swp(a, 1, 6)
		swp(a, 2, 9)
		swp(a, 4, 10)
		swp(a, 5, 11)
		swp(a, 8, 13)
		swp(a, 12, 14)
	}
	{
		swp(a, 0, 6)
		swp(a, 2, 4)
		swp(a, 3, 5)
		swp(a, 7, 11)
		swp(a, 8, 10)
		swp(a, 9, 12)
		swp(a, 13, 14)
	}
	{
		swp(a, 0, 3)
		swp(a, 1, 2)
		swp(a, 4, 7)
		swp(a, 5, 9)
		swp(a, 6, 8)
		swp(a, 10, 11)
		swp(a, 12, 13)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 6)
		swp(a, 7, 9)
		swp(a, 10, 12)
		swp(a, 11, 13)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 5)
		swp(a, 8, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 10, 11)
	}
	{
		swp(a, 5, 6)
		swp(a, 7, 8)
	}
}

// SN16 is a sorting network on 16 inputs.
//	[(0,13),(1,12),(2,15),(3,14),(4,8),(5,6),(7,11),(9,10)]
//	[(0,5),(1,7),(2,9),(3,4),(6,13),(8,14),(10,15),(11,12)]
//	[(0,1),(2,3),(4,5),(6,8),(7,9),(10,11),(12,13),(14,15)]
//	[(0,2),(1,3),(4,10),(5,11),(6,7),(8,9),(12,14),(13,15)]
//	[(1,2),(3,12),(4,6),(5,7),(8,10),(9,11),(13,14)]
//	[(1,4),(2,6),(5,8),(7,10),(9,13),(11,14)]
//	[(2,4),(3,6),(9,12),(11,13)]
//	[(3,5),(6,8),(7,9),(10,12)]
//	[(3,4),(5,6),(7,8),(9,10),(11,12)]
//	[(6,7),(8,9)]
func SN16(a []int) {
	_ = a[15]
	{
		swp(a, 0, 13)
		swp(a, 1, 12)
		swp(a, 2, 15)
		swp(a, 3, 14)
		swp(a, 4, 8)
		swp(a, 5, 6)
		swp(a, 7, 11)
		swp(a, 9, 10)
	}
	{
		swp(a, 0, 5)
		swp(a, 1, 7)
		swp(a, 2, 9)
		swp(a, 3, 4)
		swp(a, 6, 13)
		swp(a, 8, 14)
		swp(a, 10, 15)
		swp(a, 11, 12)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 8)
		swp(a, 7, 9)
		swp(a, 10, 11)
		swp(a, 12, 13)
		swp(a, 14, 15)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 3)
		swp(a, 4, 10)
		swp(a, 5, 11)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 12, 14)
		swp(a, 13, 15)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 12)
		swp(a, 4, 6)
		swp(a, 5, 7)
		swp(a, 8, 10)
		swp(a, 9, 11)
		swp(a, 13, 14)
	}
	{
		swp(a, 1, 4)
		swp(a, 2, 6)
		swp(a, 5, 8)
		swp(a, 7, 10)
		swp(a, 9, 13)
		swp(a, 11, 14)
	}
	{
		swp(a, 2, 4)
		swp(a, 3, 6)
		swp(a, 9, 12)
		swp(a, 11, 13)
	}
	{
		swp(a, 3, 5)
		swp(a, 6, 8)
		swp(a, 7, 9)
		swp(a, 10, 12)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 6, 7)
		swp(a, 8, 9)
	}
}

// SN17 is a sorting network for 17 inputs.
//	[(0,11),(1,15),(2,10),(3,5),(4,6),(8,12),(9,16),(13,14)]
//	[(0,6),(1,13),(2,8),(4,14),(5,15),(7,11)]
//	[(0,8),(3,7),(4,9),(6,16),(10,11),(12,14)]
//	[(0,2),(1,4),(5,6),(7,13),(8,9),(10,12),(11,14),(15,16)]
//	[(0,3),(2,5),(6,11),(7,10),(9,13),(12,15),(14,16)]
//	[(0,1),(3,4),(5,10),(6,9),(7,8),(11,15),(13,14)]
//	[(1,2),(3,7),(4,8),(6,12),(11,13),(14,15)]
//	[(1,3),(2,7),(4,5),(9,11),(10,12),(13,14)]
//	[(2,3),(4,6),(5,7),(8,10)]
//	[(3,4),(6,8),(7,9),(10,12)]
//	[(5,6),(7,8),(9,10),(11,12)]
//	[(4,5),(6,7),(8,9),(10,11),(12,13)]
func SN17(a []int) {
	_ = a[16]
	{
		swp(a, 0, 11)
		swp(a, 1, 15)
		swp(a, 2, 10)
		swp(a, 3, 5)
		swp(a, 4, 6)
		swp(a, 8, 12)
		swp(a, 9, 16)
		swp(a, 13, 14)
	}
	{
		swp(a, 0, 6)
		swp(a, 1, 13)
		swp(a, 2, 8)
		swp(a, 4, 14)
		swp(a, 5, 15)
		swp(a, 7, 11)
	}
	{
		swp(a, 0, 8)
		swp(a, 3, 7)
		swp(a, 4, 9)
		swp(a, 6, 16)
		swp(a, 10, 11)
		swp(a, 12, 14)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 4)
		swp(a, 5, 6)
		swp(a, 7, 13)
		swp(a, 8, 9)
		swp(a, 10, 12)
		swp(a, 11, 14)
		swp(a, 15, 16)
	}
	{
		swp(a, 0, 3)
		swp(a, 2, 5)
		swp(a, 6, 11)
		swp(a, 7, 10)
		swp(a, 9, 13)
		swp(a, 12, 15)
		swp(a, 14, 16)
	}
	{
		swp(a, 0, 1)
		swp(a, 3, 4)
		swp(a, 5, 10)
		swp(a, 6, 9)
		swp(a, 7, 8)
		swp(a, 11, 15)
		swp(a, 13, 14)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 7)
		swp(a, 4, 8)
		swp(a, 6, 12)
		swp(a, 11, 13)
		swp(a, 14, 15)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 7)
		swp(a, 4, 5)
		swp(a, 9, 11)
		swp(a, 10, 12)
		swp(a, 13, 14)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 6)
		swp(a, 5, 7)
		swp(a, 8, 10)
	}
	{
		swp(a, 3, 4)
		swp(a, 6, 8)
		swp(a, 7, 9)
		swp(a, 10, 12)
	}
	{
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 12)
	}
	{
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 10, 11)
		swp(a, 12, 13)
	}
}

// SN18 is a sorting network on 18 inputs.
//	[(0,6),(1,10),(2,15),(3,5),(4,9),(7,16),(8,13),(11,17),(12,14)]
//	[(0,12),(1,4),(3,11),(5,17),(6,14),(7,8),(9,10),(13,16)]
//	[(1,13),(2,7),(4,16),(6,9),(8,11),(10,15)]
//	[(0,1),(2,3),(4,12),(5,13),(7,9),(8,10),(14,15),(16,17)]
//	[(0,2),(1,11),(3,4),(5,7),(6,16),(10,12),(13,14),(15,17)]
//	[(1,8),(4,10),(5,6),(7,13),(9,16),(11,12)]
//	[(1,3),(2,5),(4,7),(6,8),(9,11),(10,13),(12,15),(14,16)]
//	[(1,2),(3,5),(4,6),(7,9),(8,10),(11,13),(12,14),(15,16)]
//	[(2,3),(5,8),(6,7),(9,12),(10,11),(14,15)]
//	[(3,4),(5,6),(7,8),(9,10),(11,12),(13,14)]
//	[(4,5),(6,7),(8,9),(10,11),(12,13)]
func SN18(a []int) {
	_ = a[17]
	{
		swp(a, 0, 6)
		swp(a, 1, 10)
		swp(a, 2, 15)
		swp(a, 3, 5)
		swp(a, 4, 9)
		swp(a, 7, 16)
		swp(a, 8, 13)
		swp(a, 11, 17)
		swp(a, 12, 14)
	}
	{
		swp(a, 0, 12)
		swp(a, 1, 4)
		swp(a, 3, 11)
		swp(a, 5, 17)
		swp(a, 6, 14)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 13, 16)
	}
	{
		swp(a, 1, 13)
		swp(a, 2, 7)
		swp(a, 4, 16)
		swp(a, 6, 9)
		swp(a, 8, 11)
		swp(a, 10, 15)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 12)
		swp(a, 5, 13)
		swp(a, 7, 9)
		swp(a, 8, 10)
		swp(a, 14, 15)
		swp(a, 16, 17)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 11)
		swp(a, 3, 4)
		swp(a, 5, 7)
		swp(a, 6, 16)
		swp(a, 10, 12)
		swp(a, 13, 14)
		swp(a, 15, 17)
	}
	{
		swp(a, 1, 8)
		swp(a, 4, 10)
		swp(a, 5, 6)
		swp(a, 7, 13)
		swp(a, 9, 16)
		swp(a, 11, 12)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 5)
		swp(a, 4, 7)
		swp(a, 6, 8)
		swp(a, 9, 11)
		swp(a, 10, 13)
		swp(a, 12, 15)
		swp(a, 14, 16)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 5)
		swp(a, 4, 6)
		swp(a, 7, 9)
		swp(a, 8, 10)
		swp(a, 11, 13)
		swp(a, 12, 14)
		swp(a, 15, 16)
	}
	{
		swp(a, 2, 3)
		swp(a, 5, 8)
		swp(a, 6, 7)
		swp(a, 9, 12)
		swp(a, 10, 11)
		swp(a, 14, 15)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 12)
		swp(a, 13, 14)
	}
	{
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 10, 11)
		swp(a, 12, 13)
	}
}

// SN19 is a sorting network on 19 inputs.
//	[(0,12),(1,4),(2,8),(3,5),(6,17),(7,11),(9,14),(10,13),(15,16)]
//	[(0,2),(1,7),(3,6),(4,11),(5,17),(8,12),(10,15),(13,16),(14,18)]
//	[(3,10),(4,14),(5,15),(6,13),(7,9),(11,17),(16,18)]
//	[(0,7),(1,10),(4,6),(9,15),(11,16),(12,17),(13,14)]
//	[(0,3),(2,6),(5,7),(8,11),(12,16)]
//	[(1,8),(2,9),(3,4),(6,15),(7,13),(10,11),(12,18)]
//	[(1,3),(2,5),(6,9),(7,12),(8,10),(11,14),(17,18)]
//	[(0,1),(2,3),(4,8),(6,10),(9,12),(14,15),(16,17)]
//	[(1,2),(5,8),(6,7),(9,11),(10,13),(14,16),(15,17)]
//	[(3,6),(4,5),(7,9),(8,10),(11,12),(13,14),(15,16)]
//	[(3,4),(5,6),(7,8),(9,10),(11,13),(12,14)]
//	[(2,3),(4,5),(6,7),(8,9),(10,11),(12,13),(14,15)]
func SN19(a []int) {
	_ = a[18]
	{
		swp(a, 0, 12)
		swp(a, 1, 4)
		swp(a, 2, 8)
		swp(a, 3, 5)
		swp(a, 6, 17)
		swp(a, 7, 11)
		swp(a, 9, 14)
		swp(a, 10, 13)
		swp(a, 15, 16)
	}
	{
		swp(a, 0, 2)
		swp(a, 1, 7)
		swp(a, 3, 6)
		swp(a, 4, 11)
		swp(a, 5, 17)
		swp(a, 8, 12)
		swp(a, 10, 15)
		swp(a, 13, 16)
		swp(a, 14, 18)
	}
	{
		swp(a, 3, 10)
		swp(a, 4, 14)
		swp(a, 5, 15)
		swp(a, 6, 13)
		swp(a, 7, 9)
		swp(a, 11, 17)
		swp(a, 16, 18)
	}
	{
		swp(a, 0, 7)
		swp(a, 1, 10)
		swp(a, 4, 6)
		swp(a, 9, 15)
		swp(a, 11, 16)
		swp(a, 12, 17)
		swp(a, 13, 14)
	}
	{
		swp(a, 0, 3)
		swp(a, 2, 6)
		swp(a, 5, 7)
		swp(a, 8, 11)
		swp(a, 12, 16)
	}
	{
		swp(a, 1, 8)
		swp(a, 2, 9)
		swp(a, 3, 4)
		swp(a, 6, 15)
		swp(a, 7, 13)
		swp(a, 10, 11)
		swp(a, 12, 18)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 5)
		swp(a, 6, 9)
		swp(a, 7, 12)
		swp(a, 8, 10)
		swp(a, 11, 14)
		swp(a, 17, 18)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 3)
		swp(a, 4, 8)
		swp(a, 6, 10)
		swp(a, 9, 12)
		swp(a, 14, 15)
		swp(a, 16, 17)
	}
	{
		swp(a, 1, 2)
		swp(a, 5, 8)
		swp(a, 6, 7)
		swp(a, 9, 11)
		swp(a, 10, 13)
		swp(a, 14, 16)
		swp(a, 15, 17)
	}
	{
		swp(a, 3, 6)
		swp(a, 4, 5)
		swp(a, 7, 9)
		swp(a, 8, 10)
		swp(a, 11, 12)
		swp(a, 13, 14)
		swp(a, 15, 16)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 13)
		swp(a, 12, 14)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 5)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 10, 11)
		swp(a, 12, 13)
		swp(a, 14, 15)
	}
}

// SN20 is a sorting network on 20 inputs.
//	[(0,3),(1,7),(2,5),(4,8),(6,9),(10,13),(11,15),(12,18),(14,17),(16,19)]
//	[(0,14),(1,11),(2,16),(3,17),(4,12),(5,19),(6,10),(7,15),(8,18),(9,13)]
//	[(0,4),(1,2),(3,8),(5,7),(11,16),(12,14),(15,19),(17,18)]
//	[(1,6),(2,12),(3,5),(4,11),(7,17),(8,15),(13,18),(14,16)]
//	[(0,1),(2,6),(7,10),(9,12),(13,17),(18,19)]
//	[(1,6),(5,9),(7,11),(8,12),(10,14),(13,18)]
//	[(3,5),(4,7),(8,10),(9,11),(12,15),(14,16)]
//	[(1,3),(2,4),(5,7),(6,10),(9,13),(12,14),(15,17),(16,18)]
//	[(1,2),(3,4),(6,7),(8,9),(10,11),(12,13),(15,16),(17,18)]
//	[(2,3),(4,6),(5,8),(7,9),(10,12),(11,14),(13,15),(16,17)]
//	[(4,5),(6,8),(7,10),(9,12),(11,13),(14,15)]
//	[(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16)]
func SN20(a []int) {
	_ = a[19]
	{
		swp(a, 0, 3)
		swp(a, 1, 7)
		swp(a, 2, 5)
		swp(a, 4, 8)
		swp(a, 6, 9)
		swp(a, 10, 13)
		swp(a, 11, 15)
		swp(a, 12, 18)
		swp(a, 14, 17)
		swp(a, 16, 19)
	}
	{
		swp(a, 0, 14)
		swp(a, 1, 11)
		swp(a, 2, 16)
		swp(a, 3, 17)
		swp(a, 4, 12)
		swp(a, 5, 19)
		swp(a, 6, 10)
		swp(a, 7, 15)
		swp(a, 8, 18)
		swp(a, 9, 13)
	}
	{
		swp(a, 0, 4)
		swp(a, 1, 2)
		swp(a, 3, 8)
		swp(a, 5, 7)
		swp(a, 11, 16)
		swp(a, 12, 14)
		swp(a, 15, 19)
		swp(a, 17, 18)
	}
	{
		swp(a, 1, 6)
		swp(a, 2, 12)
		swp(a, 3, 5)
		swp(a, 4, 11)
		swp(a, 7, 17)
		swp(a, 8, 15)
		swp(a, 13, 18)
		swp(a, 14, 16)
	}
	{
		swp(a, 0, 1)
		swp(a, 2, 6)
		swp(a, 7, 10)
		swp(a, 9, 12)
		swp(a, 13, 17)
		swp(a, 18, 19)
	}
	{
		swp(a, 1, 6)
		swp(a, 5, 9)
		swp(a, 7, 11)
		swp(a, 8, 12)
		swp(a, 10, 14)
		swp(a, 13, 18)
	}
	{
		swp(a, 3, 5)
		swp(a, 4, 7)
		swp(a, 8, 10)
		swp(a, 9, 11)
		swp(a, 12, 15)
		swp(a, 14, 16)
	}
	{
		swp(a, 1, 3)
		swp(a, 2, 4)
		swp(a, 5, 7)
		swp(a, 6, 10)
		swp(a, 9, 13)
		swp(a, 12, 14)
		swp(a, 15, 17)
		swp(a, 16, 18)
	}
	{
		swp(a, 1, 2)
		swp(a, 3, 4)
		swp(a, 6, 7)
		swp(a, 8, 9)
		swp(a, 10, 11)
		swp(a, 12, 13)
		swp(a, 15, 16)
		swp(a, 17, 18)
	}
	{
		swp(a, 2, 3)
		swp(a, 4, 6)
		swp(a, 5, 8)
		swp(a, 7, 9)
		swp(a, 10, 12)
		swp(a, 11, 14)
		swp(a, 13, 15)
		swp(a, 16, 17)
	}
	{
		swp(a, 4, 5)
		swp(a, 6, 8)
		swp(a, 7, 10)
		swp(a, 9, 12)
		swp(a, 11, 13)
		swp(a, 14, 15)
	}
	{
		swp(a, 3, 4)
		swp(a, 5, 6)
		swp(a, 7, 8)
		swp(a, 9, 10)
		swp(a, 11, 12)
		swp(a, 13, 14)
		swp(a, 15, 16)
	}
}
